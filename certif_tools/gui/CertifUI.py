# -*- coding: utf-8 -*-
"""
Created on Mon Jan 20 11:03:14 2014

@author: eredero
"""

from PyQt4 import QtCore
from PyQt4 import QtGui

import os, sys

CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(CURRENT_DIR)
import CertifUIModel as UIModel
import src.core as core
import src.wifi as wifi

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(my_string):
        '''
        Something useful for Qt
        '''
        return my_string


class MyWidget(QtGui.QWidget, UIModel.Ui_Form):
    '''
    Creates the main window starting from the
    SpeakerPlotUIModel generated by pyuic4
    '''
    def __init__(self, parent=None):
        '''
        Creates the window
        '''
        QtGui.QWidget.__init__(self)
        UIModel.Ui_Form.__init__(self)
        self.setupUi(self)

        buttons = [self.deviceInfo, self.manoAnaStart, self.manoDigiStart,
                   self.titoHdmiStart, self.titoHdmiStart_beta,
                   self.titoSpdifStart,
                   self.wifiConnect,
                   self.plcStart, self.plcErase, self.plcFlash,
                   self.plcStop, self.plcInfo]
        functions = [self.dev_info, self.mano_ana_start, self.mano_digi_start,
                     self.tito_hdmi_start, self.tito_hdmi_start_beta,
                     self.tito_spdif_start,
                     self.wifi_connect,
                     self.plc_start, self.plc_unflash, self.plc_flash,
                     self.plc_stop, self.plc_info]
        for button, func in zip(buttons, functions):
            # Connect buttons
            QtCore.QObject.connect(button,
                                   QtCore.SIGNAL(_fromUtf8("clicked()")),
                                   func)

    def dev_info(self):
        devices = core.find_ip()
        txt = ""
        if len(devices) < 1:
            txt = "No Devialet devices found"
        for ip in devices:
            if core.is_manolo(ip):
                txt = "{}\n{}: Manolo".format(txt, ip)
            elif core.is_tito(ip):
                txt = "{}\n{}: Tito".format(txt, ip)
            else:
                txt = "{}\n{}: Else".format(txt, ip)
        self.answerLabel.setText(txt)

    def plc_info(self):
        devices = core.find_ip()
        txt = ""
        if len(devices) < 1:
            txt = "No Devialet devices found"
        for ip in devices:
            ret = core.info_plc(ip)
            txt = "{}{}: {}\n\n".format(txt, ip, ret)
        self.answerLabel.setText(txt)

    def mano_ana_start(self):
        self.answerLabel.setText("Starting Manolo analog audio...")
        devices = core.find_ip()
        for ip in devices:
            if core.is_manolo(ip):
                core.start_audio(ip, analog=True)

    def mano_digi_start(self):
        self.answerLabel.setText("Starting Manolo digital audio...")
        devices = core.find_ip()
        for ip in devices:
            if core.is_manolo(ip):
                core.start_audio(ip, analog=False)

    def tito_hdmi_start(self):
        self.answerLabel.setText("Starting Tito HDMI audio...")
        devices = core.find_ip()
        for ip in devices:
            if core.is_tito(ip):
                core.start_hdmi_audio(ip)

    def tito_hdmi_start_beta(self):
        self.answerLabel.setText("Starting Tito HDMI audio (beta)...")
        devices = core.find_ip()
        for ip in devices:
            if core.is_tito(ip):
                core.start_hdmi_audio_beta(ip)

    def tito_spdif_start(self):
        self.answerLabel.setText("Starting Tito spdif audio...")
        devices = core.find_ip()
        for ip in devices:
            if core.is_tito(ip):
                core.start_tito_spdif(ip)

    def wifi_connect(self):
        devices = core.find_ip()
        for ip in devices:
             ans = wifi.wifi_connection(ip)
        if len(ans) > 0:
            self.answerLabel.setText(ans)
        else:
            self.answerLabel.setText("Wifi connection failed")

    def plc_start(self):
        devices = core.find_ip()
        for ip in devices:
            core.start_plc(ip)
        self.answerLabel.setText("PLC started")

    def plc_stop(self):
        devices = core.find_ip()
        for ip in devices:
            core.stop_plc(ip)
        self.answerLabel.setText("PLC stopped")

    def plc_flash(self):
        devices = core.find_ip()
        for ip in devices:
            core.flash_plc(ip)
        self.answerLabel.setText("PLC flashed")

    def plc_unflash(self):
        devices = core.find_ip()
        for ip in devices:
            core.unflash_plc(ip)
        self.answerLabel.setText("PLC erased")